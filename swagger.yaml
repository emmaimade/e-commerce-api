openapi: 3.0.0
info:
  title: E-Commerce API
  description: |
    A comprehensive E-Commerce REST API built with Node.js, Express, and PostgreSQL.

    Features:
    - User authentication and authorization (JWT)
    - Password reset functionality via email
    - Product management with Cloudinary image uploads
    - Shopping cart functionality
    - Order processing with status tracking and Paystack payment integration
    - Email notifications for order updates
    - Admin dashboard capabilities
    - Inventory management
    - Search and filtering capabilities

    ## Authentication
    Most endpoints require JWT authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Base URL
    - Production: `https://your-production-url.com/v1`
    - Development: `http://localhost:3000/v1`
  version: 1.0.0
  contact:
    name: Imade-Taye Emmanuel
    email: emmaimade14@gmail.com
    url: https://github.com/emmaimade
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://your-production-url.com/v1
    description: Production server
  - url: http://localhost:3000/v1
    description: Local development server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        role:
          type: string
          enum: [customer, admin]
          description: User role
          example: "customer"
        reset_password_token:
          type: string
          description: Password reset token
        reset_token_expiry:
          type: string
          format: date-time
          description: Password reset token expiry
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
        updated_at:
          type: string
          format: date-time
          description: User last update timestamp

    Product:
      type: object
      required:
        - id
        - name
        - price
        - inventory_qty
      properties:
        id:
          type: string
          format: uuid
          description: Unique product identifier
          example: "550e8400-e29b-41d4-a716-446655440001"
        name:
          type: string
          description: Product name
          example: "iPhone 13"
        description:
          type: string
          description: Product description
          example: "Latest iPhone model"
        price:
          type: integer
          description: Product price in kobo (for NGN) or cents (for USD)
          example: 99999900
        inventory_qty:
          type: integer
          description: Available stock quantity
          example: 50
        status:
          type: string
          enum: [active, out_of_stock]
          description: Product status
          example: "active"
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          description: Array of product images with metadata
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProductImage:
      type: object
      properties:
        url:
          type: string
          format: uri
          description: Cloudinary image URL for display
          example: "https://res.cloudinary.com/demo/image/upload/v1234567890/products/sample.jpg"
        public_id:
          type: string
          description: Cloudinary public ID for management operations
          example: "products/sample_abc123"
        width:
          type: integer
          description: Image width in pixels
          example: 800
        height:
          type: integer
          description: Image height in pixels
          example: 600
        format:
          type: string
          description: Image format
          example: "jpg"
        is_primary:
          type: boolean
          description: Whether this is the primary product image
          example: true
        display_order:
          type: integer
          description: Order for displaying images
          example: 0

    Address:
      type: object
      required:
        - id
        - user_id
        - line1
        - city
        - postal_code
        - country
        - phone
      properties:
        id:
          type: string
          format: uuid
          description: Unique address identifier
        user_id:
          type: string
          format: uuid
          description: User ID this address belongs to
        line1:
          type: string
          description: Address line 1
          example: "123 Main Street"
        line2:
          type: string
          description: Address line 2 (optional)
          example: "Apt 4B"
        city:
          type: string
          description: City
          example: "Lagos"
        state:
          type: string
          description: State/Province
          example: "Lagos State"
        postal_code:
          type: string
          description: Postal/ZIP code
          example: "100001"
        country:
          type: string
          description: Country
          example: "Nigeria"
        phone:
          type: string
          description: Phone number
          example: "+234-XXX-XXXX-XXX"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Cart:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique cart identifier
        user_id:
          type: string
          format: uuid
          description: User ID who owns this cart
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CartItem:
      type: object
      required:
        - id
        - cart_id
        - product_id
        - quantity
      properties:
        id:
          type: string
          format: uuid
          description: Unique cart item identifier
        cart_id:
          type: string
          format: uuid
          description: Cart ID this item belongs to
        product_id:
          type: string
          format: uuid
          description: Product ID in the cart
        quantity:
          type: integer
          description: Quantity of the product
          example: 2
        product:
          $ref: '#/components/schemas/Product'
        added_at:
          type: string
          format: date-time

    Order:
      type: object
      required:
        - id
        - user_id
        - total
        - order_status
      properties:
        id:
          type: string
          format: uuid
          description: Unique order identifier
        user_id:
          type: string
          format: uuid
          description: User ID who placed the order
        total:
          type: integer
          description: Total order amount in kobo (for NGN) or cents
          example: 129998000
        status:
          type: string
          enum: [pending, paid, failed, refunded]
          description: Payment status
          example: "pending"
        payment_ref:
          type: string
          description: Payment reference from gateway
          example: "PAY_123456789"
        shipping_address_id:
          type: string
          format: uuid
          description: Shipping address ID
        payment_method:
          type: string
          description: Payment method used
          example: "card"
        order_status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
          description: Current order fulfillment status
          example: "processing"
        placed_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        quantity:
          type: integer
        price:
          type: integer
          description: Price at time of order in kobo/cents
        product:
          $ref: '#/components/schemas/Product'

    OrderStatusHistory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        notes:
          type: string
          description: Optional notes about status change
        updated_at:
          type: string
          format: date-time

    PaymentLog:
      type: object
      properties:
        id:
          type: integer
          description: Unique payment log identifier
        order_id:
          type: string
          format: uuid
          description: Associated order ID
        payment_reference:
          type: string
          description: Unique payment reference
          example: "PAY_123456789"
        status:
          type: string
          enum: [pending, paid, failed, refunded]
          description: Payment status
        amount:
          type: integer
          description: Payment amount in kobo/cents
        payment_method:
          type: string
          description: Payment method used
          example: "card"
        processed_by:
          type: string
          enum: [webhook, admin, user]
          description: How payment was processed
        failure_reason:
          type: string
          description: Reason for payment failure (if applicable)
        gateway_response:
          type: object
          description: Full payment gateway response
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
        message:
          type: string
          description: Response message
        data:
          type: object
          description: Response data (varies by endpoint)

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Detailed error information
        statusCode:
          type: integer
          description: HTTP status code
          example: 400

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                password:
                  type: string
                  minLength: 6
                  example: "password123"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          token:
                            type: string
        '400':
          description: Validation error or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          token:
                            type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Send password reset email to user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
      responses:
        '200':
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Password reset email sent successfully"
        '400':
          description: Email is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User with this email does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/reset-password/{token}:
    post:
      tags:
        - Authentication
      summary: Reset password using token
      description: Reset user password using the token received via email
      security: []
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Password reset token received via email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - confirmPassword
              properties:
                password:
                  type: string
                  minLength: 6
                  example: "newPassword123"
                confirmPassword:
                  type: string
                  minLength: 6
                  example: "newPassword123"
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Password reset successfully"
        '400':
          description: Validation error or invalid/expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Endpoints
  /user/profile:
    get:
      tags:
        - User
      summary: Get user profile
      description: Retrieve current user's profile information
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/updateprofile:
    patch:
      tags:
        - User
      summary: Update user profile
      description: Update current user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users:
    get:
      tags:
        - User
      summary: Get all users (Admin)
      description: Retrieve a list of all users with optional filtering (Admin only)
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users/{id}:
    get:
      tags:
        - User
      summary: Get user by ID (Admin)
      description: Retrieve a specific user by their ID (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Product Endpoints
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve a list of all products with optional filtering
      security: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'

  /admin/products:
    get:
      tags:
        - Products
      summary: Get all products (Admin)
      description: Retrieve a list of all products with optional filtering (Admin only)
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Products
      summary: Create new product
      description: Create a new product (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - inventory_qty
              properties:
                name:
                  type: string
                  example: "iPhone 13"
                description:
                  type: string
                  example: "Latest iPhone model"
                price:
                  type: integer
                  example: 99999900
                inventory_qty:
                  type: integer
                  example: 50
                images:
                  type: array
                  items:
                    type: string
                  example: ["image1.jpg", "image2.jpg"]
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID (Admin)
      description: Retrieve a specific product by its ID (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      tags:
        - Products
      summary: Update product
      description: Update a product (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: integer
                inventory_qty:
                  type: integer
                images:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Products
      summary: Delete product
      description: Delete a product (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Product deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/products/{id}/images:
    patch:
      tags:
        - Products
      summary: Delete product image
      description: Delete a product image (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - public_id
              properties:
                public_id:
                  type: string
                  example: "products/sample_abc123"
      responses:
        '200':
          description: Image deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product or image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Cart Endpoints
  /cart:
    get:
      tags:
        - Cart
      summary: Get user's cart
      description: Retrieve current user's cart items
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/CartItem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Cart
      summary: Add item to cart
      description: Add a product to the user's cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440001"
                quantity:
                  type: integer
                  minimum: 1
                  example: 2
      responses:
        '201':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CartItem'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Cart
      summary: Clear cart
      description: Remove all items from the user's cart
      responses:
        '200':
          description: Cart cleared successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Cart cleared successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cart/{id}:
    patch:
      tags:
        - Cart
      summary: Update cart item quantity
      description: Update the quantity of a specific cart item
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  example: 3
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CartItem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Cart
      summary: Remove item from cart
      description: Remove a specific item from the cart
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Item removed from cart successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Item removed from cart successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /order:
    get:
      tags:
        - Orders
      summary: Get user's orders
      description: Retrieve current user's order history
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Orders
      summary: Create new order
      description: Create a new order from cart items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - shipping_address_id
              properties:
                shipping_address_id:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440002"
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /order/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Retrieve a specific order with its items
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Order'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  $ref: '#/components/schemas/OrderItem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Orders
      summary: Cancel order
      description: Cancel a specific order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Order cancelled successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /order/{orderId}/history:
    get:
      tags:
        - Orders
      summary: Get order status history
      description: Retrieve status change history for an order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order history retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrderStatusHistory'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /order/payment/verify/{reference}:
    get:
      tags:
        - Orders
      summary: Verify payment
      description: Verify payment status for an order
      parameters:
        - name: reference
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment verified successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PaymentLog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Payment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/orders:
    get:
      tags:
        - Orders
      summary: Get all orders (Admin)
      description: Retrieve all orders in the system (Admin only)
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID (Admin)
      description: Retrieve a specific order with its items (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Order'
                          - type: object
                            properties:
                              items:
                                type: array
                                items:
                                  $ref: '#/components/schemas/OrderItem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/orders/payment/verify:
    post:
      tags:
        - Orders
      summary: Verify payment (Admin)
      description: Verify payment status for an order (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reference
              properties:
                reference:
                  type: string
                  example: "PAY_123456789"
      responses:
        '200':
          description: Payment verified successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PaymentLog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Payment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/orders/{id}/status:
    put:
      tags:
        - Orders
      summary: Update order status
      description: Update order status (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, processing, shipped, delivered, cancelled]
                notes:
                  type: string
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Payment Endpoints
  /payments/status/{reference}:
    get:
      tags:
        - Payments
      summary: Get payment status
      description: Retrieve payment status by reference
      parameters:
        - name: reference
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment status retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PaymentLog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Payment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/payments/status/{reference}:
    get:
      tags:
        - Payments
      summary: Get payment status (Admin)
      description: Retrieve payment status by reference (Admin only)
      parameters:
        - name: reference
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment status retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PaymentLog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Payment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/payments/logs:
    get:
      tags:
        - Payments
      summary: Get payment logs
      description: Retrieve payment logs (Admin only)
      responses:
        '200':
          description: Payment logs retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/PaymentLog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/payments/analytics:
    get:
      tags:
        - Payments
      summary: Get payment analytics
      description: Retrieve payment analytics (Admin only)
      responses:
        '200':
          description: Payment analytics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          total_payments:
                            type: integer
                          successful_payments:
                            type: integer
                          failed_payments:
                            type: integer
                          total_amount:
                            type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payments/webhook:
    post:
      tags:
        - Payments
      summary: Payment webhook
      description: Handle payment webhook events
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                data:
                  type: object
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Webhook processed successfully"
        '400':
          description: Invalid webhook data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Shipping Address Endpoints
  /shipping:
    get:
      tags:
        - Shipping
      summary: Get all user addresses
      description: Retrieve all shipping addresses for the user
      responses:
        '200':
          description: Addresses retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Address'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Shipping
      summary: Add new shipping address
      description: Create a new shipping address for the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - line1
                - city
                - postal_code
                - country
                - phone
              properties:
                line1:
                  type: string
                  example: "123 Main Street"
                line2:
                  type: string
                  example: "Apt 4B"
                city:
                  type: string
                  example: "Lagos"
                state:
                  type: string
                  example: "Lagos State"
                postal_code:
                  type: string
                  example: "100001"
                country:
                  type: string
                  example: "Nigeria"
                phone:
                  type: string
                  example: "+234-XXX-XXXX-XXX"
      responses:
        '201':
          description: Address created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Address'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /shipping/{id}:
    get:
      tags:
        - Shipping
      summary: Get address by ID
      description: Retrieve a specific shipping address
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Address retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Address'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      tags:
        - Shipping
      summary: Update shipping address
      description: Update a specific shipping address
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                line1:
                  type: string
                line2:
                  type: string
                city:
                  type: string
                state:
                  type: string
                postal_code:
                  type: string
                country:
                  type: string
                phone:
                  type: string
      responses:
        '200':
          description: Address updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Address'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Shipping
      summary: Delete shipping address
      description: Delete a specific shipping address
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Address deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Address deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Authentication
    description: User authentication, authorization, and password management
  - name: User
    description: User profile management and account operations
  - name: Products
    description: Product management and catalog operations
  - name: Cart
    description: Shopping cart functionality
  - name: Orders
    description: Order management and tracking
  - name: Payments
    description: Payment processing and analytics
  - name: Shipping
    description: Shipping address management